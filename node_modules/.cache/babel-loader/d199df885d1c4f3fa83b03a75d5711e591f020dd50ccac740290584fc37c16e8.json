{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItems = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItems) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItems.quantity++;\n        existingItems.totalPrice = existingItems.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\n\n// Option-2(using action creator) :-\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"Pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n    const sendRequest = async () => {\n      const response = await fetch('https://redux-advanced-1c313-default-rtdb.firebaseio.com/cart.json', {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"Success\",\n        title: \"Success!\",\n        message: \"Sent cart data successfully!\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"Error\",\n        title: \"Error!\",\n        message: \"Sent cart data failed!\"\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItems","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","existingItem","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"sources":["C:/Complete Web Development/React.js/12.Redux-Advanced/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\nconst cartSlice = createSlice({\r\n    name: \"cart\",\r\n    initialState: {\r\n        items: [],\r\n        totalQuantity: 0,\r\n    },\r\n    reducers: {\r\n        addItemToCart(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItems = state.items.find(item => item.id === newItem.id);\r\n            state.totalQuantity++;\r\n            if (!existingItems) {\r\n                state.items.push({\r\n                    id: newItem.id,\r\n                    price: newItem.price,\r\n                    quantity: 1,\r\n                    totalPrice: newItem.price,\r\n                    name: newItem.title\r\n                });\r\n            } else {\r\n                existingItems.quantity++;\r\n                existingItems.totalPrice = existingItems.totalPrice + newItem.price;\r\n            }\r\n        },\r\n        removeItemFromCart(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item => item.id === id);\r\n            state.totalQuantity--;\r\n            if (existingItem.quantity === 1) {\r\n                state.items = state.items.filter(item => item.id !== id);\r\n            } else {\r\n                existingItem.quantity--;\r\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n// Option-2(using action creator) :-\r\nexport const sendCartData = (cart) => {\r\n    return async (dispatch) => {\r\n        dispatch(\r\n            uiActions.showNotification({\r\n                status: \"Pending\",\r\n                title: \"Sending...\",\r\n                message: \"Sending cart data!\",\r\n            })\r\n        );\r\n\r\n        const sendRequest = async () => {\r\n            const response = await fetch(\r\n                'https://redux-advanced-1c313-default-rtdb.firebaseio.com/cart.json',\r\n                {\r\n                    method: \"PUT\",\r\n                    body: JSON.stringify(cart)\r\n                });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Sending cart data failed.\");\r\n            }\r\n        };\r\n\r\n        try {\r\n            await sendRequest();\r\n\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: \"Success\",\r\n                    title: \"Success!\",\r\n                    message: \"Sent cart data successfully!\",\r\n                })\r\n            );\r\n        } catch (error) {\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: \"Error\",\r\n                    title: \"Error!\",\r\n                    message: \"Sent cart data failed!\",\r\n                })\r\n            );\r\n        }\r\n    };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,YAAY;AAEtC,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,aAAa,EAAE;EACnB,CAAC;EACDC,QAAQ,EAAE;IACNC,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACzB,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9B,MAAMC,aAAa,GAAGJ,KAAK,CAACJ,KAAK,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACtEP,KAAK,CAACH,aAAa,EAAE;MACrB,IAAI,CAACO,aAAa,EAAE;QAChBJ,KAAK,CAACJ,KAAK,CAACY,IAAI,CAAC;UACbD,EAAE,EAAEL,OAAO,CAACK,EAAE;UACdE,KAAK,EAAEP,OAAO,CAACO,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAET,OAAO,CAACO,KAAK;UACzBf,IAAI,EAAEQ,OAAO,CAACU;QAClB,CAAC,CAAC;MACN,CAAC,MAAM;QACHR,aAAa,CAACM,QAAQ,EAAE;QACxBN,aAAa,CAACO,UAAU,GAAGP,aAAa,CAACO,UAAU,GAAGT,OAAO,CAACO,KAAK;MACvE;IACJ,CAAC;IACDI,kBAAkBA,CAACb,KAAK,EAAEC,MAAM,EAAE;MAC9B,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMW,YAAY,GAAGd,KAAK,CAACJ,KAAK,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC7DP,KAAK,CAACH,aAAa,EAAE;MACrB,IAAIiB,YAAY,CAACJ,QAAQ,KAAK,CAAC,EAAE;QAC7BV,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACmB,MAAM,CAACT,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC5D,CAAC,MAAM;QACHO,YAAY,CAACJ,QAAQ,EAAE;QACvBI,YAAY,CAACH,UAAU,GAAGG,YAAY,CAACH,UAAU,GAAGG,YAAY,CAACL,KAAK;MAC1E;IACJ;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMO,YAAY,GAAIC,IAAI,IAAK;EAClC,OAAO,MAAOC,QAAQ,IAAK;IACvBA,QAAQ,CACJ1B,SAAS,CAAC2B,gBAAgB,CAAC;MACvBC,MAAM,EAAE,SAAS;MACjBR,KAAK,EAAE,YAAY;MACnBS,OAAO,EAAE;IACb,CAAC,CAAC,CACL;IAED,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,oEAAoE,EACpE;QACIC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,IAAI;MAC7B,CAAC,CAAC;MAEN,IAAI,CAACM,QAAQ,CAACM,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;IACJ,CAAC;IAED,IAAI;MACA,MAAMR,WAAW,EAAE;MAEnBJ,QAAQ,CACJ1B,SAAS,CAAC2B,gBAAgB,CAAC;QACvBC,MAAM,EAAE,SAAS;QACjBR,KAAK,EAAE,UAAU;QACjBS,OAAO,EAAE;MACb,CAAC,CAAC,CACL;IACL,CAAC,CAAC,OAAOU,KAAK,EAAE;MACZb,QAAQ,CACJ1B,SAAS,CAAC2B,gBAAgB,CAAC;QACvBC,MAAM,EAAE,OAAO;QACfR,KAAK,EAAE,QAAQ;QACfS,OAAO,EAAE;MACb,CAAC,CAAC,CACL;IACL;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMW,WAAW,GAAGvC,SAAS,CAACwC,OAAO;AAC5C,eAAexC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}